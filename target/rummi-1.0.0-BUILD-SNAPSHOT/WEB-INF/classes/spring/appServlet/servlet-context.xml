<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="org.spring.rummi" />
	
	<!-- interceptors : 인터셉터를 모아둔 태그 -->
	<interceptors>
		<!-- interceptor : 요청이 Dispatcher Servlet 에서 Controller에 도달하기 전 또는 후에
						   요청/응답 객체(req, resp)를 가로채서 사용할 수 있는 객체
		 -->
		<interceptor>
			<!-- 가로챌 요청의 패턴을 지정 -->
			<mapping path="/**"/> <!-- /* 이면 안됨 하위 요청까지 모두 인식하기위해 /** 해야함 -->
			<!-- 인터셉터 역할을 수행할 클래스를 찾아서 bean으로 등록 -->
			<beans:bean id="boardTypeInterceptor" class="edu.kh.comm.common.interceptor.BoardTypeInterceptor"/>
		</interceptor>
	
	</interceptors>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- aop auto proxy -->
	<aop:aspectj-autoproxy proxy-target-class="false"/>
	
	
	
	<!-- @Scheduling 어노테이션을 추가  -->
	<task:annotation-driven/>
	
	<!-- Websocket 요청시 handler 클래스와 연결하기 -->
	<beans:bean id="chatHandler" class="edu.kh.comm.chat.model.websocket.ChatWebsocketHandler"/>
	
	<websocket:handlers>
		<!-- 웹소켓 요청을 처리할 bean 지정 -->
		<websocket:mapping handler="chatHandler" path="/chat"/>
		
		<websocket:handshake-interceptors>
			<!-- 
				interceptor : http 통신 req, resp 가로채는 역할 
				handshake-interceptors : 요청 관련 데이터중 HttpSession(로그인정보, 채팅방번호) 을 가로채서
										 WebSocketSession에 넣어주는 역할 
			-->			
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
		
		<!-- SockJS 라이브러리를 이요해서 만들어진 웹소켓 객체임을 인식 -->
		<websocket:sockjs></websocket:sockjs>
	</websocket:handlers>
	
</beans:beans>
